~= Grammar for lambda calculus =~

program     → ( stmt )* EOF ;

stmt        → binding
            | command
            | termStmt
            | "\n" ;
bindingStmt → IDENTIFIER "=" expression "\n" ;
commandStmt → "env" "\n"
            | "unbind" IDENTIFIER "\n" ;
termStmt    → term "\n" ;
term        → IDENTIFIER
            | abstraction
            | application
            | grouping ;
abstraction      → LAMBDA IDENTIFIER+ "." expression ;
application → expression expression ;
grouping    → "(" expression ")" ;
LAMBDA      → "L" | "λ" | "lambda" ;
IDENTIFIER  → [a-z0-9]+ ;


~= Modified for recursive descent parsing =~

term            → abstraction
                | application ;
abstraction     → LAMBDA IDENTIFIER+ "." term ;
application     → atom atom* ;
atom            → "(" term ")"
                | IDENTIFIER
                | abstraction ;


~= Operator precedence table (descending precedence) =~

Name 	        Associates
Application     Left
Abstraction     Extends as far to the right as possible